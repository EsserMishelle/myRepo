// /*Week 6 - Day 1 - Lab
// Practice What You Learned
// Complete all work in your REPL.it
// Then Submit The Link To Your REPL.it in Canvas
// Combining Datatypes & Callbacks Lab & HW
// This combination lab/hw (start during lab time) is designed to be a review of array methods with callbacks i.e forEach, Map, Filter, Reduce, Find, Every etc */

// /*
// Technical Requirements
// JavaScript files must run without errors (comment out things that don't work and leave a comment for the hw grader)
// Submission Guidelines
// Complete all work in your REPL.it
// Then Submit The Link To Your REPL.it in Canvas
// Section Array Methods with Callbacks
// A few array methods use callbacks. For example .map- .maptakes each element of an array and does something to it and returns a new arrays. .filter- .filter takes each element of an array and does something to it and returns a new array.*/

// /*But what should it do? Multiply everything by 5? Capitalize everything? If .maphad a hard-coded thing it always did with an array, it wouldn't be very flexible.

// By allowing a callback to determine what happens to each array element we get a lot of flexibility and we can do some really powerful things. */

const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]

const panagram = ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']
// /*The first question is for the numbers array. The second question is for the words array.

// //Every
// Determine if every number is greater than or equal to 0
// determine if every word shorter than 8 characters*/

function everyNum(arr) {
  return arr.every(num => {
    num > 0
  })
}
function everyWord(arr) {
  return arr.every(word => {
    word.length < 8
  })
}

console.log(`Is every number is greater than or equal to 0? ${everyNum(nums)}`)
console.log(`Is every word is shorter than 8 characters? ${everyWord(panagram)}`)


// //Filter
// // filter the array for numbers less than 4
// // filter words that have an even length

const myNumsFilter = nums.filter(num =>
  num < 4)
const myWordsFilter = panagram.filter(word =>
  word.length % 2 === 0)
console.log('Numbers less than 4: ' + myNumsFilter);
console.log('Words length that are even: ' + myWordsFilter)

// // Find
// // Find the first value divisible by 5
// // find the first word that is longer than 5 characters

const myNumsFind = nums.find(num =>
  num % 5 === 0);
const myWordsFind = panagram.find(word =>
  word.length > 5)

// console.log('First num divisible by 5: ' +
console.log('First num divisible by 5: ' +
  (myNumsFind === null ? 'no number found' : myNumsFind));
// myNumsFind)
console.log('First word that is longer than 5: ' + (myWordsFind === null ? 'no word found' : myWordsFind));

// // Find Index
// // find the index of the first number that is divisible by 3
// // find the index of the first word that is less than 2 characters long

const myNumsFindIndex = nums.findIndex(num =>
  num % 3 == 0)
const myWordsFindIndex = panagram.findIndex(word => word.length < 2)
console.log('The index of the first number that is divisible by 3: ' + ((myNumsFindIndex === -1) ? 'no index found' : myNumsFindIndex));
console.log('The index of the first word that is less than 2: ' + ((myWordsFindIndex === -1) ? 'no index found' : myWordsFindIndex));

// // For Each
// // console.log each value of the nums array multiplied by 3
// // console.log each word with an exclamation point at the end of it


nums.forEach((num) => {
  console.log(num * 3);
})

panagram.forEach((word) => {
  console.log(word + '!');
})

// // Thought Questions
// // What happened to the original array ?
// //A:they are not is not changed-
// //   Can you store the values from a forEachmethod in a new array ?
// //yes. see below
const myNumsforEach = [];
nums.forEach((num) => {
  myNumsforEach.push(num * 3);
})
console.log(myNumsforEach)

const myWordsforEach = [];
panagram.forEach((word) => {
  myWordsforEach.push(word + '!');
})
console.log(myWordsforEach)

// //   What is the difference between a forEach and a forloop ? One is imperative (forEach); one is declaravtive (forloop)

// //     Map
// // make a new array of each number multiplied by 100
// // make a new array of all the words in all uppercase

const myNumsMap = nums.map(num => num * 100);
const myWordsMap = panagram.map(
  word => word.toUpperCase());
console.log(myNumsMap);
console.log(myWordsMap);
// Thought Questions

// What happened to the original array ? stays the same
//   Can you store the values from a mapmethod in a new array ? already did

//     Some
// Find out if some numbers are divisible by 7
// Find out if some words have the letter ain them

// const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]

// const panagram = ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']

function someNum(arr) {
  return arr.some(num =>
    (num % 7 === 0)
  )
}
function someWord(arr) {
  return arr.some(word =>
    word.includes('a'));
}

console.log('Is some number divisible by 7? ' + someNum(nums))
console.log(`Do some words have 'a' in them?? ${someWord(panagram)}`)
console.log(nums.some(num => num % 7 === 0))
console.log(panagram.some(word => word.includes('a')))

// Hungry for More
// Reduce
// Add all the numbers in the array together using the reducemethod
console.log('adding all the numbers in the array: ' + nums.reduce((a, b) =>
  a + b, 0))
// // concatenate all the words using reduce
// // Thought Questions
console.log('concatenating all the words: ' +
  panagram.reduce((acc, curr) => acc + ' ' + curr),)

// What happened to the original array? no change
//   Can you store the value returned from reduce in a variable ? yes

//   Sort
// Try to sort without any arguments, do you get what you'd expect with the numbers array?
// Try to sort without any arguments, do you get what you'd expect with the words array?

// Sort the numbers in ascending order
// Sort the numbers in descending order
// Sort the words in ascending order
// Sort the words in descending order
console.log('sorting the nums arr in ascending order: ' + nums.sort((a, b) => a - b))
console.log('sorting the nums arr in descending order: ' + nums.sort((a, b) => b - a))
console.log('sorting the panagram arr in ascending order: ' + panagram.sort((a, b) => a - b))
// console.log('sorting the nums arr in descending order: ' + panagram.sort((a,b)=> b-a))
//above doesn't work
console.log('sorting the panagram arr in descending order: ' + panagram.reverse())


// Thought Questions

// What happened to the original array ? stays the same

//   Array Methods Challenge Problems
// isPanagram
// Using the following array - test whether each letter a - z(case insensitive) is used at least once

// const panagram = ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']

const regEx = /^[a-z]/i; // /^[a-z]/i means begins with a-z (case insensitive)
function includesAtoZ(arr) {
  return arr.every(letter => letter.match(regEx))
};
// function includesAtoZ(arr) { //don't know 'match' very well --suggested by AI
//     return arr.every(word => regEx.test(word))
// }
console.log('Does array panagram include every letter a-z? ' + includesAtoZ(panagram))

//tally method
// Using the following array - return an object with the letters and the number of times they occur
const isPanagram = (arr) => {
  let counter = {}
  for (let word of arr) {
    word = word.split('')
    for (let letter of word) {
      letter = letter.toLowerCase()
      if (counter[letter]) {
        counter[letter] += 1
      } else {
        counter[letter] = 1
      }
    }
  }
  if (Object.keys(counter).length === 26) {
    return true
  } else {
    return false
  }
}

console.log(isPanagram(panagram))






// Write a function that accepts a string as an argument. The function should return true if the string is
// Working with data
// filter for products with a price that is less than 10, using the array below:
// sort alphabetically by product name
const products = [
  {
    "name": "allen wrench",
    "price": 2.99,
    "description": "handy tool"
  },
  {
    "name": "cornucopia",
    "price": 5.99,
    "description": "festive holiday decoration"
  },
  {
    "name": "banana",
    "price": 0.99,
    "description": "full of potassium"
  },
  {
    "name": "guillotine (cigar)",
    "price": 10.59,
    "description": "behead your stub"
  },
  {
    "name": "jack-o-lantern",
    "price": 3.99,
    "description": "spooky seasonal fun"
  },
  {
    "name": "doggie treat (box)",
    "price": 5.99,
    "description": "fido loves 'em"
  },
  {
    "name": "egg separator",
    "price": 3.99,
    "description": "it separates yolks from whites"
  },
  {
    "name": "LED lightbulb",
    "price": 6.55,
    "description": "It's super-efficient!"
  },
  {
    "name": "owl pellets",
    "price": 3.99,
    "description": "Don't ask what they used to be."
  },
  {
    "name": "flag",
    "price": 5.99,
    "description": "catches the breeze"
  },
  {
    "name": "hair brush",
    "price": 6.99,
    "description": "fine boar bristles"
  },
  {
    "name": "iridium (one gram)",
    "price": 19.36,
    "description": "corrosion-resistant metal"
  },
  {
    "name": "quark",
    "price": 0.01,
    "description": "Very small"
  },
  {
    "name": "turtleneck",
    "price": 19.99,
    "description": "available in black and slightly-darker black"
  },
  {
    "name": "kaleidoscope",
    "price": 8.25,
    "description": "tube with moving plastic pieces inside"
  },
  {
    "name": "mitt (leather)",
    "price": 15,
    "description": "regulation sized"
  },
  {
    "name": "nothing",
    "price": 10,
    "description": "Hey, if you pay us, we won't ask any questions."
  },
  {
    "name": "violin",
    "price": 2000,
    "description": "Talk about a JS fiddle..."
  },
  {
    "name": "yoyo",
    "price": 1,
    "description": "We had to pull some strings to get this one in."
  },
  {
    "name": "pincushion",
    "price": 1.99,
    "description": "You'll get 'stuck' on it"
  },
]
// More Hungry For More
// Watch these extra CSS videos explaining flexbox in more depth.

// filter for products with a price that is less than 10, using the array below:
const cheapProducts = [];
for (let i = 0; i < products.length; i++) {
  if (products[i].price < 10)
    cheapProducts.push(products[i]);
}
console.log(cheapProducts)

console.log(products.filter(prod =>
  prod['price'] < 10))

//// sort alphabetically by product name
// console.log(products.sort((a, b) => a.name - b.name))

//// sort alphabetically by product price
// console.log(products.sort((a, b) => a.price - b.price))

//solution using sort with curr and prev variables
console.log(products.sort((current, previous) => {
  if (current.name < previous.name) {
    return -1
  } else {
    return 1
  }
}))